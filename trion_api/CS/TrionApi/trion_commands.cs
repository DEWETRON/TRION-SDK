
//
// This file is automatically generated
//
namespace Trion
{





public enum TrionCommand
{

OPEN_BOARD = 0x0001,  // Set
CLOSE_BOARD = 0x0002,  // Set
RESET_BOARD = 0x0003,  // Set
START_ACQUISITION = 0x0004,  // Get / Set
STOP_ACQUISITION = 0x0005,  // Set
ACT_SAMPLE_COUNT = 0x000A,  // Get      Read Register ADC_SCNT

UPDATE_PARAM_ALL = 0x0010,  // Set
UPDATE_PARAM_ACQ_ALL = 0x0011,  // Set
UPDATE_PARAM_CHN_ALL = 0x0012,  // Set
UPDATE_PARAM_ACQ = 0x0013,  // Set
UPDATE_PARAM_ACQ_SR = 0x0041,  // Set
UPDATE_PARAM_ACQ_BUFFER = 0x0042,  // Set
UPDATE_PARAM_MUX = 0x0014,  // Set
UPDATE_PARAM_INTSIG0 = 0x0015,  // Set
UPDATE_PARAM_INTSIG1 = 0x0016,  // Set
UPDATE_PARAM_AI = 0x0017,  // Set
UPDATE_PARAM_CNT = 0x0018,  // Set
UPDATE_PARAM_DI = 0x0019,  // Set
UPDATE_PARAM_BOARD_CNT = 0x001A,  // Set
UPDATE_PARAM_CAN = 0x001B,  // Set
UPDATE_PARAM_FREQOUTEXTTRIG0 = 0x0036,  // Set
UPDATE_PARAM_FREQOUTEXTTRIG1 = 0x0037,  // Set

UPDATE_PARAM_CANFD = 0x0023,  // Set
UPDATE_PARAM_UART = 0x0052,  // Set
UPDATE_PARAM_AO_PATTERN = 0x0053,  // Set
UPDATE_PARAM_AO_CONST_VALUE = 0x0054,  // Set
UPDATE_PARAM_AO_SUM_COEFF = 0x0055,  // Set
ASYNC_POLLING_TIME = 0x001C,  // Set
ASYNC_FRAME_SIZE = 0x001D,  // Set
UPDATE_PARAM_ACQ_TIMING = 0x001E,  // Set
TIMING_STATE = 0x001F,  // Set

// Backwards compatibility (R)
BUFFER_BLOCK_SIZE = 0x0102,  // Set
BUFFER_BLOCK_COUNT = 0x0107,  //
BUFFER_START_POINTER = 0x0020,  // Get
BUFFER_END_POINTER = 0x0021,  // Get
BUFFER_TOTAL_MEM_SIZE = 0x0028,  // Get
BUFFER_CLEAR_ERROR = 0x0022,  // Set
BUFFER_AVAIL_NO_SAMPLE = 0x0025,  // Get
BUFFER_ACT_SAMPLE_POS = 0x0026,  // Get
BUFFER_FREE_NO_SAMPLE = 0x0027,  // Set
BUFFER_ONE_SCAN_SIZE = 0x002A,  // Get
BUFFER_ONE_BLOCK_SIZE = 0x0029,  // Get


// DMA0, DMA1 ... buffer access (R/W), Rule: BUFFER_i+1_ = BUFFER_i_ + offset (0x0020)
BUFFER_0_BLOCK_SIZE = 0x0600,  // Set / Get
BUFFER_0_BLOCK_COUNT = 0x0601,  // Set / Get
BUFFER_0_START_POINTER = 0x0602,  // Get
BUFFER_0_END_POINTER = 0x0603,  // Get
BUFFER_0_TOTAL_MEM_SIZE = 0x0604,  // Get
BUFFER_0_CLEAR_ERROR = 0x0605,  // Set
BUFFER_0_AVAIL_NO_SAMPLE = 0x0606,  // Get
BUFFER_0_ACT_SAMPLE_POS = 0x0607,  // Get
BUFFER_0_FREE_NO_SAMPLE = 0x0608,  // Set
BUFFER_0_ONE_SCAN_SIZE = 0x0609,  // Get
BUFFER_0_WRITE_SAMPLE_POS = 0x060A,  // Get
BUFFER_0_AVAIL_FREE_MEM = 0x060B,  // Get
BUFFER_0_WAIT_FREE_MEM = 0x060C,  // Get
BUFFER_0_COMMIT_SAMPLES = 0x060D,  // Set
BUFFER_0_SAMPLE_COUNT = 0x060E,  // Get
BUFFER_0_WAIT_AVAIL_NO_SAMPLE = 0x060F,  // Get
BUFFER_0_BOARD_MEM_SIZE = 0x0610,  // Get
BUFFER_0_FREE_BOARD_MEM_SIZE = 0x0611,  // Get
BUFFER_0_NUM_SAMPLES_IN_BOARD_MEM = 0x0612,  // Get

BUFFER_1_BLOCK_SIZE = 0x0620,  // Set / Get
BUFFER_1_BLOCK_COUNT = 0x0621,  // Set / Get
BUFFER_1_START_POINTER = 0x0622,  // Get
BUFFER_1_END_POINTER = 0x0623,  // Get
BUFFER_1_TOTAL_MEM_SIZE = 0x0624,  // Get
BUFFER_1_CLEAR_ERROR = 0x0625,  // Set
BUFFER_1_AVAIL_NO_SAMPLE = 0x0626,  // Get
BUFFER_1_ACT_SAMPLE_POS = 0x0627,  // Get
BUFFER_1_FREE_NO_SAMPLE = 0x0628,  // Set
BUFFER_1_ONE_SCAN_SIZE = 0x0629,  // Get
BUFFER_1_WRITE_SAMPLE_POS = 0x062A,  // Get
BUFFER_1_AVAIL_FREE_MEM = 0x062B,  // Get
BUFFER_1_WAIT_FREE_MEM = 0x062C,  // Get
BUFFER_1_COMMIT_SAMPLES = 0x062D,  // Set
BUFFER_1_SAMPLE_COUNT = 0x062E,  // Get
BUFFER_1_WAIT_AVAIL_NO_SAMPLE = 0x062F,  // Get
BUFFER_1_BOARD_MEM_SIZE = 0x0630,  // Get
BUFFER_1_FREE_BOARD_MEM_SIZE = 0x0631,  // Get
BUFFER_1_NUM_SAMPLES_IN_BOARD_MEM = 0x0632,  // Get


GET_UART_STATUS = 0x0030,  // Get
BUFFER_WAIT_AVAIL_NO_SAMPLE = 0x0031,  // Get
ACQ_STATE = 0x0032,  // Get
UPDATE_PARAM_AREF = 0x0033,  // Set
TIMING_TIME = 0x0034,  // Get
GPS_RECEIVER_RESET = 0x0035,  //Set

PXI_LINE_STATE = 0x0040,  // Get

DISCRET_STATE_SET = 0x0050,  // Set
DISCRET_STATE_CLEAR = 0x0051,  // Set

DISCRET_GROUP32_SET = 0x0060,  // Set (will set all 32 Bits of a grou, will have encoded groupinfo in lowernibble ( x60, x61, x62,...)

IDLED_BOARD_ON = 0x0070,  // Set
IDLED_BOARD_OFF = 0x0071,  // Set
IDLED_CHANNEL_ON = 0x0072,  // Set
IDLED_CHANNEL_OFF = 0x0073,  // Set



GETDATA_TIME_OUT = 0x0A01,  // Get
UPDATE_PARAM_ACQ_ROUTE = 0x0103,  // Set
INT_REF_VAL = 0x0201,  // Set / Get
REF_MODE = 0x0202,  // Set / Get
UPDATE_PARAM_INTCAL = 0x0205,  // Set
BOARD_ACT_SAMPLE_COUNT = 0x0301,  // R        Read Register ADC_SCNT TBD: 64Bit command
BOARD_ADC_DELAY = 0x0302,  // R        Obtain ADC-Delay (valid only AFTER setting a samplerate)
BOARD_AFSPAN = 0x0303,  // R        Query %of Samplerate that is alias free
BOARD_RESET_SELFCAL = 0x0305,  // W        Reset the whole Selfcal-Section in BaseE2Prom with the Default-values
BOARD_BASEEEPROM_WRITE = 0x0401,  // W        Write the BaseEEprom-File to EEProm
BOARD_CONEEPROM_WRITE = 0x0402,  // W        Write the ConnectorEEprom-File to EEProm
BOARD_BASEEEPROM_SELFCAL_WRITE = 0x0403,  // W        Write the BaseEEprom-File to EEProm
BOARD_BASEEEPROM_RESTORE_BACKUP = 0x0404,  // W        Try to restore a backup for base e2prom
BOARD_CONEEPROM_RESTORE_BACKUP = 0x0405,  // W        Try to restore a backup for con e2prom
BOARD_AITEDSEX_READ = 0x0406,  // R        Reads the AiTEDSEx data from the TEDS chip
BOARD_AITEDSEX_WRITE = 0x0407,  // W        Write the AiTEDSEx data back to the TEDS chip
BOARD_AITEDSEX_SYNCHRONIZE = 0x0408,  // U        Synchronizes raw TEDS memory data with updated TEDSInfo data
BOARD_FW_WRITE_PROTECT = 0x0409,  // W
BOARD_AITEDSEX_READ_CHAIN = 0x040A,  // R        Reads the AiTEDSEx data from a chain of TEDS chips

// Peripheral
BOARD_PERIPHERAL_EEPROM_WRITE = 0x350,  // W        Write the Peripheral-File to EEProm

// Sync Data Samples readout
BOARD_ACT_SAMPLE_VALUE_COUNT = 0x0360,  // Get      Read the number of 32bit values in the SYNC_DATA_SAMPLES register (returns 0 if not supported)
BOARD_ACT_SAMPLE_VALUE_POINTER = 0x0361,  // Get      Updates all SYNC_DATA_SAMPLES registers and returns the address of a buffer with BOARD_ACT_SAMPLE_VALUE_COUNT 32bit values

BOARD_NEW_SAMPLE_CALLBACK = 0x0362,  // Get/Set  Registers/Clears a function that will be called when a new sample is available (sets NEW_SAMPLES_IRQ_CTRL accordingly)
BOARD_NEW_SAMPLE_CALLBACK_CONTEXT = 0x0363,  // Get/Set  Read/Write the context that is passed to the BOARD_NEW_SAMPLE_CALLBACK function each call


BOARD_REINIT = 0x0420,  // Set

OPEN_BOARD_ALL = 0x0450,  // Set
CLOSE_BOARD_ALL = 0x0451,  // Set
RESET_BOARD_ALL = 0x0452,  // Set

CAN_OPEN = 0x0460,  // Set
CAN_CLOSE = 0x0461,  // Set
CAN_START = 0x0462,  // Set
CAN_STOP = 0x0463,  // Set

UART_OPEN = 0x0470,  // Set
UART_CLOSE = 0x0471,  // Set
UART_START = 0x0472,  // Set
UART_STOP = 0x0473,  // Set

RESCAN_CHANNEL_MODULES = 0x0483,  // Set

//Strict Test Commands
BOARD_BASEEEPROM_DESTROY = 0x0499,  // W        Corrupt the BaseE2Prom

};





}

